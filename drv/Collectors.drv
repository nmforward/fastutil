package PACKAGE;

import java.util.function.BiConsumer;
import java.util.function.Supplier;
import java.util.stream.Collector;

#ifdef JDK_PRIMITIVE_STREAM
import java.util.function.JDK_PRIMITIVE_OBJKEY_CONSUMER;
import java.util.stream.JDK_PRIMITIVE_STREAM;
#endif

public final class COLLECTORS {

    private COLLECTORS() { }

#ifdef JDK_PRIMITIVE_STREAM
    public static final Supplier<ARRAY_LIST> LIST_SUPP = ARRAY_LIST::new;
    public static final JDK_PRIMITIVE_OBJKEY_CONSUMER<ARRAY_LIST> LIST_ACC = (l, e) -> l.add((KEY_TYPE) e);
    public static final BiConsumer<ARRAY_LIST, ARRAY_LIST> LIST_COMB = ARRAY_LIST::addAll;

    public static final Supplier<OPEN_HASH_SET> SET_SUPP = OPEN_HASH_SET::new;
    public static final JDK_PRIMITIVE_OBJKEY_CONSUMER<OPEN_HASH_SET> SET_ACC = (s, e) -> s.add((KEY_TYPE) e);
    public static final BiConsumer<OPEN_HASH_SET, OPEN_HASH_SET> SET_COMB = OPEN_HASH_SET::addAll;
#endif

#if KEYS_PRIMITIVE

    /**
     * Should be used when working with boxed objects. This method can be slower if original stream wasn't
     * using boxed objects.
     */
    public static Collector<KEY_GENERIC_CLASS, ARRAY_LIST, LIST> toListSlow() {
        return Collector.of(
                ARRAY_LIST::new,
                (l, e) -> l.add((KEY_TYPE) e),
                (b1, b2) -> {
                    b1.addAll(b2);
                    return b1;
                },
                s -> s);
    }

    /**
     * Should be used when working with boxed objects. This method can be slower if original stream wasn't
     * using boxed objects.
     */
    public static Collector<KEY_GENERIC_CLASS, IMMUTABLE_LIST.Builder, IMMUTABLE_LIST> toImmutableListSlow() {
        return Collector.of(
                IMMUTABLE_LIST::builder,
                IMMUTABLE_LIST.Builder::add,
                IMMUTABLE_LIST.Builder::combine,
                IMMUTABLE_LIST.Builder::build);
    }
#endif

#ifdef JDK_PRIMITIVE_STREAM
    public static ARRAY_LIST toList(JDK_PRIMITIVE_STREAM stream) {
        return stream.collect(LIST_SUPP, LIST_ACC, LIST_COMB);
    }

    public static IMMUTABLE_LIST toImmutableList(JDK_PRIMITIVE_STREAM stream) {
        return IMMUTABLE_LIST.copyOf(toList(stream));
    }
#elif !KEYS_PRIMITIVE
    public static KEY_GENERIC Collector<KEY_GENERIC_CLASS, ARRAY_LIST, LIST KEY_GENERIC> toList() {
        return Collector.of(
                ARRAY_LIST::new,
                (l, e) -> l.add((KEY_TYPE) e),
                (b1, b2) -> {
                    b1.addAll(b2);
                    return b1;
                },
                s -> s);
    }
#endif

#if KEYS_PRIMITIVE
    /**
     * Should be used when working with boxed objects. This method can be slower if original stream wasn't
     * using boxed objects.
     */
    public static Collector<KEY_GENERIC_CLASS, OPEN_HASH_SET, SET> toSetSlow() {
        return Collector.of(
                OPEN_HASH_SET::new,
                (s, e) -> s.add((KEY_TYPE) e),
                (b1, b2) -> {
                    b1.addAll(b2);
                    return b1;
                },
                s -> s);
    }

    /**
     * Should be used when working with boxed objects. This method can be slower if original stream wasn't
     * using boxed objects.
     */
    public static Collector<KEY_GENERIC_CLASS, IMMUTABLE_SET.Builder, IMMUTABLE_SET> toImmutableSetSlow() {
        return Collector.of(
                IMMUTABLE_SET::builder,
                IMMUTABLE_SET.Builder::add,
                IMMUTABLE_SET.Builder::combine,
                IMMUTABLE_SET.Builder::build);
    }
#endif

#ifdef JDK_PRIMITIVE_STREAM
    public static OPEN_HASH_SET toSet(JDK_PRIMITIVE_STREAM stream) {
        return stream.collect(SET_SUPP, SET_ACC, SET_COMB);
    }

    public static IMMUTABLE_SET toImmutableSet(JDK_PRIMITIVE_STREAM stream) {
        // More efficient to collect to list before doing an immutable set copy of.
        return IMMUTABLE_SET.copyOf(toList(stream));
    }
#elif !KEYS_PRIMITIVE
    public static KEY_GENERIC Collector<KEY_GENERIC_CLASS, OPEN_HASH_SET, SET KEY_GENERIC> toSet() {
        return Collector.of(
                OPEN_HASH_SET::new,
                (s, e) -> s.add((KEY_TYPE) e),
                (b1, b2) -> {
                    b1.addAll(b2);
                    return b1;
                },
                s -> s);
    }

    public static KEY_GENERIC Collector<KEY_GENERIC_CLASS, IMMUTABLE_SET.Builder, IMMUTABLE_SET KEY_GENERIC> toImmutableSet() {
        return Collector.of(
                IMMUTABLE_SET::builder,
                IMMUTABLE_SET.Builder::add,
                IMMUTABLE_SET.Builder::combine,
                IMMUTABLE_SET.Builder::build);
    }
#endif

}

